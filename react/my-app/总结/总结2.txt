1. React Developer Tools  Chrome插件，方便调试
2. PropTypes 与 DefaultProps:   
    PropTypes: 接收外部传来的 Props时类型要做校验
    DefaultProps: 如果父组件没有向子组件传值时，可以设置默认值
    PropTypes.arrayOf(PropTypes.number,PropTypes.string)      // 是 number 或者 string
3. 当组件的 state 或者 props 发生改变的时候， render 函数就会重新执行
4. 自己实现 react 底层， state 改变 render 函数重新执行的效果，思路：
    (1) state 数据
    (2) JSX 模板
    (3) 数据 + 模板 结合，生成真实的 DOM，来显示
    (4) state 发生改变
    (5) 数据 + 模板 结合，生成真实的 DOM， 替换原始的 DOM

    缺陷： 每次都生成一个完整的 DOM，完全替换之前的 DOM-------非常耗费性能

    优化：
        (1) state 数据
        (2) JSX 模板
        (3) 数据 + 模板 结合，生成真实的 DOM，来显示
        (4) state 发生改变
        (5) 数据 + 模板 结合，生成真实的 DOM， 不直接替换原始的 DOM
        (6) 新的 DOM （文档碎片 DocumentFragment） 和原始的 DOM 作对比，找差异
        (7) 发现/找出 input 框发生了变化
        (8) 只用新的 DOM 中的 input 元素，替换掉老的 DOM 中的 input 元素

    缺陷： 
        性能的提升并不明显

    react 中结合了虚拟 DOM 的解决方案：
        (1) state 数据
        (2) JSX 模板
        (3) 数据 + 模板，生成虚拟的 DOM （虚拟 DOM 就是一个 JS 对象，用它来描述真实的 DOM）（损耗了性能，但是代价小）
            ['div',{id: 'abc'},['span',{},'hello']]

        (4) 用虚拟 DOM 的结构生成真实的 DOM，来显示
            <div id='abc'><span>hello</span></div>

        (5) state 发生变化

        (6) 数据 + 模板 生成新的虚拟 DOM （极大的提升了性能，本质上是生成一个js对象，js对象的创建的过程性能损耗极低）
            ['div',{id: 'abc'},['span',{},'bye bye']]

        (7) 比较原始虚拟 DOM  和新的虚拟 DOM 的区别，找到区别是 span 中的内容（两个 js 对象的比对，极大的提升了性能）
        
        (8) 直接操作 DOM，改变 span 中的内容

        优点：
        (1) 性能提升了
        (2) 它使得跨端应用得以实现。React Native  -----得益于虚拟 DOM 的存在

    5. <div>item</div>  =>  React.createElement('div', {}, 'item')
        // JSX -> createElement  ->  虚拟DOM(JS 对象) -> 真实的 DOM

    6. (1) setState 底层性能优化，可以把多次 setState  合成一次 setState,减少虚拟 DOM 比对的次数。
       (2) 虚拟 DOM 比对：
               同层比对：一层不满足匹配要求时，下面的就不会再去比对了，直接废弃掉，用新的去替换老的
               key 值比对：react 做列表循环时引入 key 值，为了提高虚拟 DOM 比对的性能，key 值要保持稳定，尽量不要用 index
       (3) 
       ref = {(input) => { this.input = input }}----------this.input -> e.target
       ref  帮助我们直接获取 DOM 元素

       DOM 获取并不及时，这是可以将获取的代码放进 setState 的第二个参数里
       this.setState(() => ({}),() => {
           console.log(length)
       })

    7. react 生命周期函数：在某一个时刻组件会自动调用执行的函数
       (1) 初始化Initialization: setup props and state
       (2) 挂载Mounting：组件第一次被放在页面上的时候
                componentWillMount -> render -> componentDidMount
       (3) 更新Updation：
            props:    componentWillReceiveProps -> shouldComponentUpdate (true)-> componentWillUpdate -> render -> componentDidUpdate
            states:   shouldComponentUpdate (true)-> componentWillUpdate -> render -> componentDidUpdate
            
    // 一个组件要从父组件接受参数
    // 只要父组件的 render 函数被重新执行了，子组件的这个生命周期函数就会被执行
    // 如果这个组件第一次存在于父组件中，不会执行
    // 如果这个组件之前已经存在于父组件中，才会执行
    componentWillReceiveProps(){
        console.log("input componentWillReceiveProps")
    }
       (4) 注销Unmounting： componentWillUnmount

    ------------------------------------------------------------------------------------------------
    所有的生命周期函数都可以不写但是 render 函数必须写，因为我们的组件是继承自 component 组件的，react 的 component 组件内置了
    除 render 函数外所有的生命周期函数实现

    8. react 性能优化的点
        (1) 在 constructor 里面写函数的 this 绑定，改变作用域：  保证整个程序里面函数作用域的绑定只会执行一次；避免子组件的无谓渲染
        (2) setState 内置了性能提升的机制，是一个异步函数，可以把多次数据的改变结合成一次，降低虚拟 DOM 的比对频率
        (3) 虚拟 DOM，同层比对，引入了 key 值：通过提升虚拟 DOM 的比对速度，提升 react 的性能
        (4) 借助 shouldComponentUpdate ,避免无谓的组件 render 函数的运行从而提高 React 组件的性能
    9. ajax 请求： componentDidMount   axios
    10. 模拟一个接口，让 ajax 请求获取到这个接口的结果去改变页面上的内容:  借助 Charles
    11. React 的 CSS 过渡动画, CSS 动画效果
        借助 react-transition-group 实现复杂动画